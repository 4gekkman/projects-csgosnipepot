/*//========================================////
////																			  ////
////   f.js - функционал модели документа   ////
////																			  ////
////========================================////
//// 			        		 	    	   ////
//// 			    Оглавление  			 ////
//// 			         				       ////
////=============================//*/
/**
 *
 *  s0. Функционал, доступный всему остальному функционалу
 *
 *    f.s0.txt_delay_save								| s0.1. Функционал "механизма отложенного сохранения для текстовых полей"
 *   	f.s0.get_cat_quality_item_color 	| s0.2. Вычислить цвет для вещи (зависящий от категории и качества)
 *    f.s0.update_goods_order_add_sub 	| s0.3. Обрабатывать входящие через websocket пуш-изменения товарных остатков на заказываемые вещи
 *
 *  s1. Общий функционал модели управления главным меню
 *
 *		f.s1.select_subdoc								| s1.1. Выбрать кликнутый поддокумент
 *
 *  s2. Общий функционал модели управления поддокументами поддокумента "Скины на заказ"
 *
 *		f.s2.select_skins2order_subdoc		| s2.1. Выбрать указанный поддокумент поддокумента "Скины на заказ"
 *
 * 	s3. Функционал модели актуального списка скинов на заказ в магазине
 *
 * 		f.s3.remove_item_from_items2order	| s3.1. Удалить кликнутый скин из скинов на заказ
 *
 * 	s4. Функционал модели добавления скинов в актуальный список скинов на заказ
 *
 * 		f.s4.add_item_to_items2order 			| 4.1. Добавить кликнутый скин в скины на заказ
 *
 *
 */


//========================//
// 			        		 	    //
// 			 Функционал  			//
// 			         			    //
//====================----//
var ModelFunctions = { constructor: function(self) { var f = this;


	//--------------------------------------------------------------------//
	// 			        		 			                                            //
	// 			 s0. Функционал, доступный всему остальному функционалу 			//
	// 			         					                                            //
	//--------------------------------------------------------------------//
	f.s0 = {};

		//-------------------------------------------------------------------------//
		// s0.1. Функционал "механизма отложенного сохранения для текстовых полей" //
		//-------------------------------------------------------------------------//
		f.s0.txt_delay_save = {};

			//----------------------------------------------------------------------//
			// 1] Применить "механизм отложенного сохранения для текстовых полей"   //
			//----------------------------------------------------------------------//
			// - Он особенно актуален для текстовых полей.
			// - Делает так, что функция сохранения срабатывает не при каждом нажатии.
			// - А лишь спустя заданные N секунд после последнего изменения.
			f.s0.txt_delay_save.use = function(savefunc){

				// 2.1. Остановить ранее запланированный setTimeout
				if(self.m.s0.txt_delay_save.settimeoutid())
					clearTimeout(self.m.s0.txt_delay_save.settimeoutid());

				// 2.2] Если время для сохранения не пришло
				if(+Date.now() - +self.m.s0.txt_delay_save.lastupdate() < +self.m.s0.txt_delay_save.gap) {

					// Поставить выполнение на таймер
					var timerId = setTimeout(savefunc, self.m.s0.txt_delay_save.gap);

					// Сохранить timerId в модель
					self.m.s0.txt_delay_save.settimeoutid(timerId);

					// Сохранить текущий timestamp в модель
					self.m.s0.txt_delay_save.lastupdate(Date.now());

					// Указать, что имееются не сохранённые данные
					self.m.s0.txt_delay_save.is_unsaved_data(1);

					// Завершить
					return 1;

				}

				// 2.3] Если время для сохранения пришло
				else {

					// Сохранить текущий timestamp в модель
					self.m.s0.txt_delay_save.lastupdate(Date.now());

				}

			};

			//-------------------------------------//
			// 2] Заблокировать закрытие документа //
			//-------------------------------------//
			// - Иными словами указать, что есть несохранённые данные.
			// - Попытка закрыть страницу в итоге приведёт к вызову модального confirm.
			f.s0.txt_delay_save.block = function(){
				self.m.s0.txt_delay_save.is_unsaved_data(1);
			};

			//--------------------------------------//
			// 3] Разблокировать закрытие документа //
			//--------------------------------------//
			// - Иными словами указать, что нет несохранённых данных.
			// - Попытка закрыть страницу в итоге уже не приведёт к вызову модального confirm.
			f.s0.txt_delay_save.unblock = function(){
				self.m.s0.txt_delay_save.is_unsaved_data(0);
			};

		//-------------------------------------------------------------------//
		// s0.2. Вычислить цвет для вещи (зависящий от категории и качества) //
		//-------------------------------------------------------------------//
		f.s0.get_cat_quality_item_color = function(data, event) {

			// 1] Получить качество для вещи data
			var quality = data.quality();

			// 2] Получить itemtypes
			var itemtypes = data.itemtypes;

			// 3] Получить инфу, является ли вещь StarTrack-вещью или ножом
			var is_startrak = itemtypes.startrak();
			var is_knife = itemtypes.knife();

			// 4] Вернуть соответствующий этой вещи цвет

				// 3.1] Нож
				if(is_knife == 1) return '#ffff00';

				// 3.2] StarTrak
				if(is_startrak == 1) return '#cf6a32';

				// 3.3] Mil-Spec Grade
				if(quality == 'Mil-Spec Grade') return '#4b69ff';

				// 3.4] Restricted
				if(quality == 'Restricted') return '#8847ff';

				// 3.5] Classified
				if(quality == 'Classified') return '#d32ce6';

				// 3.6] Covert
				if(quality == 'Covert') return '#eb4b4b';

				// 3.7] Прочие качества
				return 'transparent';

		};

		//--------------------------------------------------------------------------------------------------//
		// s0.3. Обрабатывать входящие через websocket пуш-изменения товарных остатков на заказываемые вещи //
		//--------------------------------------------------------------------------------------------------//
		f.s0.update_goods_order_add_sub = function(data) {

			// 1] Добавить в m.s3.items все товары из data.add
			for(var i=0; i<data.add.length; i++) {

				// 1] Подготовить объект к добавлению
				var obj = ko.mapping.fromJS(data.add[i]);

				// 2] Проверить, нет ли уже i-го товара в items
				var is_i_already_in = (function(){

					// 2.1] Получить список assetid, которые уже в items
					var assetids = (function(){
						var results = [];
						for(var j=0; j<self.m.s3.items().length; j++) {
							results.push(self.m.s3.items()[j].assetid());
						}
						return results;
					})();

					// 2.2] Проверить, есть ли уже assetid i-го товара в assetids
					return (assetids.indexOf(data.add[i].assetid) != -1);

				})();

				// 3] Добавить его в m.s3.items
				if(is_i_already_in == false)
					self.m.s3.items.push(obj);

			}

			// 2] Убрать из m.s3.items все товары из data.subtract
			(function(){

				// 2.1] Убрать из m.s3.items
				self.m.s3.items.remove(function(item) {

					var is_item_in_subtract = false;
					for(var i=0; i<data.subtract.length; i++) {
						if(data.subtract[i]['assetid'] == item.assetid())
							is_item_in_subtract = true;
					}
					return is_item_in_subtract;

				});

			})();

		};



	//----------------------------------------------------------------//
	// 			        		 			                                        //
	// 			 s1. Общий функционал модели управления главным меню 			//
	// 			         					                                        //
	//----------------------------------------------------------------//
	f.s1 = {};

		//--------------------------------------//
		// s1.1. Выбрать кликнутый поддокумент  //
		//--------------------------------------//
		// - Пояснение
		f.s1.select_subdoc = function(data, event) {

			// 1] Выбрать кликнутый поддокумент
			self.m.s1.selected_subdoc(data);

			// 2] Если переключение происходит на поддокумент "Скины на заказ"
			if(data.name() == 'skins2order') {

				// 2.1] Выбрать поддокумент list поддокумента "Скины на заказ"
				self.m.s2.selected_subdoc(self.m.s2.indexes.subdocs['list']);

			}

		};


	//------------------------------------------------------------------------------------------------//
	// 			        		 			                                                                        //
	// 			 s2. Общий функционал модели управления поддокументами поддокумента "Скины на заказ" 			//
	// 			         					                                                                        //
	//------------------------------------------------------------------------------------------------//
	f.s2 = {};

		//-------------------------------------------------------------------//
		// s2.1. Выбрать указанный поддокумент поддокумента "Скины на заказ" //
		//-------------------------------------------------------------------//
		// - Пояснение
		f.s2.select_skins2order_subdoc = function(name, data, event) {

			// 1] Выбрать кликнутый поддокумент
			self.m.s2.selected_subdoc(self.m.s2.indexes.subdocs[name]);

		};


	//--------------------------------------------------------------------------------//
	// 			        		 			                                                        //
	// 			 s3. Функционал модели актуального списка скинов на заказ в магазине 			//
	// 			         					                                                        //
	//--------------------------------------------------------------------------------//
	f.s3 = {};

		//-------------------------------------------------//
		// s3.1. Удалить кликнутый скин из скинов на заказ //
		//-------------------------------------------------//
		// - Пояснение
		f.s3.remove_item_from_items2order = function(data, event) {

			ajaxko(self, {

				command: 	"\\M14\\Commands\\C22_remove_skin2order",
				from: 		"ajaxko",
				data: 		{
					id_skin: data.id()
				},
				prejob: 	function(config, data, event){

					// 1] Показать тост
					toastr.info("Пожалуйста, подождите...", "Удаляю скин");

				},
				postjob: 	function(data, params){},
				ok_0: 		function(data, params){

					// 1] Показать тост
					toastr.success("Скин успешно удалён.", "Успех");

				},
				ok_1: 		function(data, params){

					// 1] Показать тост
					toastr.error("Нет прав.", "Ошибка");

				},
				ok_2: 		function(data, params){

					// 1] Показать тост
					toastr.error(data.data.errortext, "Ошибка");

				}
			});


		};


	//----------------------------------------------------------------------------------------//
	// 			        		 			                                                                //
	// 			 s4. Функционал модели добавления скинов в актуальный список скинов на заказ 			//
	// 			         					                                                                //
	//----------------------------------------------------------------------------------------//
	f.s4 = {};

		//-----------------------------------------------//
		// 4.1. Добавить кликнутый скин в скины на заказ //
		//-----------------------------------------------//
		// - Пояснение
		f.s4.add_item_to_items2order = function(data, event) {

			ajaxko(self, {

				command: 	"\\M14\\Commands\\C21_add_skin2order",
				from: 		"ajaxko",
				data: 		{
					id_skin: data.id()
				},
				prejob: 	function(config, data, event){

					// 1] Показать тост
					toastr.info("Пожалуйста, подождите...", "Добавляю скин");

				},
				postjob: 	function(data, params){},
				ok_0: 		function(data, params){

					// 1] Показать тост
					toastr.success("Скин успешно добавлен.", "Успех");

				},
				ok_1: 		function(data, params){

					// 1] Показать тост
					toastr.error("Нет прав.", "Ошибка");

				},
				ok_2: 		function(data, params){

					// 1] Показать тост
					toastr.error(data.data.errortext, "Ошибка");

				}
			});

		};







return f; }};




























