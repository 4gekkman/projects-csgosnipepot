/*==========================================//
// 																          //
//               KoComponents     	  			//
//																          //
//==========================================//

---------------------------
Оглавление

	Зависимости компонента

		-

	Ликбез по общим вопросам использования компонентов
		# Как получить доступ к модели компонента
		# Во всех ID в DOM компонента надо использовать его UID
		# Как получить доступ из компонента к модели документа, использующего компонент
		# Если компонент простой, без собственнйо модели
		# Использование LiveTemplates в PhpStorm

	Информация по этому компоненту
		# Введение
		# Как использовать
		# Кастомизация стилей

---------------------------

//------------------------//
// Зависимости компонента //
//------------------------//

	-

//----------------------------------------------------//
// Ликбез по общим вопросам использования компонентов //
//----------------------------------------------------//

	> Как получить доступ к модели компонента
		- Допустим, надо использовать компонент в документе X.
		- У этого документа X есть своя модель в m.js.
		- В этой модели следует создать наблюдаемую для модели компонента.
		- При создании DOM-структуры компонента нужно указать параметры.
		- Они указываются в атрибуте params.
		- Одним из параметров следует указать параметр "model".
		- В качестве его значения надо указать подготовленную ранее наблюдаемую.
		- В эту наблюдаемую запишется ссылка на модель компонента.

	> Во всех ID в DOM компонента надо использовать его UID
		- В документе все ID в DOM-структуре должны быть уникальны.
		- Поэтому, если в DOM компонентах есть ID, надо сделать их уникальными.
		- Для этого в конец каждого ID надо добавлять уникальный UID компонента,
			а также префиксить их с помощью ID компонента (например, "K1_...").

	> Как получить доступ из компонента к модели документа, использующего компонент
		- Надо через params передавать в компонент наблюдаемые модели документа.
		- Обычно, это происходит через св-во "model".
		- Таким образом компонент получает к ним доступ, и может изменять.

  > Если компонент простой, без собственнйо модели
  	- Бывают простые компоненты, для которых держать свою модель нет смысла.
  	- Можно просто удалить constructor со всем содержимым из компонента.
  	- В этом случае никакого доступа к модели компонента не будет.
  	- Все параметры из params будут доступны в HTML-коде компонента.

	> Использование LiveTemplates в PhpStorm
		- У всех компонентов есть конфигурационный объект.
		- Он находится в атрибуте params html-тега компонента.
		- Зачастую, он содержит большое кол-во разных параметров.
		- Каждый раз при использовании компонента их настраивать утомительно.
		- Поэтому, следует использовать LiveTemplates в PhpStorm.
		- Суть: html код, доступный по короткому ключу и нажатию на tab.
		- Чтобы открыть меню LiveTemplates, надо в PhpStorm нажать:

			CTRL + SHIFT + A		->    LiveTemplates

//--------------------------------//
// Информация по этому компоненту // TODO: написать этот раздел
//--------------------------------//


	> Введение
		-

	> Как использовать
		-

	> Кастомизация стилей
		-


//==========================================*/
/**
 *
 *
 * 	А. Стартовая подготовка
 *
 * 		А1. Сохранить ссылку на объект-модель в self
 * 		А2. Сохранить в модель входящие параметры
 * 		А3. Разовые действия до создания модели
 *
 * 			А3.1. Если это не первый запуск, завершить
 * 			А3.2. Загрузить входящие параметры в объект self.params
 * 			А3.3. Подготовить UID компонента
 * 			А3.4. Подготовка входящих через params данных
 * 			А3.5.
 *
 * 	F. Функционал компонента
 *
 * 		F1. Объект-контейнер для всего функционала
 * 		F2.
 *
 * 	M. Модель компонента
 *
 * 		M1. Объект-контейнер для всех свойств модели
 * 		M2. Имя компонента
 * 		M3. Номер (UID) компонента в документе
 * 		M4.
 * 		Mn. Индексы и вычисляемые значения модели
 *
 * 	Y. Данные, которым доступны все прочие данные
 *
 * 		Y1. Объект-контейнер для всех свойств модели
 * 		Y2.
 * 		Yn. Индексы и вычисляемые значения
 *
 * 	X. Подготовка к завершению
 *
 * 		X1. Сервис провайдер клиентской модели
 *
 * 			X1.1. Если это не первый запуск, завершить
 * 			X1.2. Подключение к websocket-серверам, назначение обработчиков для входящих сообщений
 * 			X1.3.
 *
 * 		X2. Записать ссылку self в переданную в params ko-наблюдаемую
 * 		X3. Вернуть ссылку self на объект-модель
 *
 *
 */

(function(){

//----------------------//
// 			        		 	  //
// 		 Имя компонента 	//	TODO: укажите имя компонента
// 			         			  //
//----------------------//
var component_name = "sample";


//----------------------//
// 			        		 	  //
// 		 Код компонента 	//
// 			         			  //
//----------------------//
library_ko_components[component_name] = { constructor: function(params, componentInfo) {


	//--------------------------------------//
	// 			        		 	                  //
	// 			 А. Стартовая подготовка  			//
	// 			         			                  //
	//--------------------------------------//

	//----------------------------------------------//
	// А1. Сохранить ссылку на объект-модель в self //
	//----------------------------------------------//
	var self = this;

	//--------------------------------------------//
	// А2. Сохранить в модель входящие параметры  //
	//--------------------------------------------//

		// 1] Подготовить в модели объект для входящих параметров //
		//--------------------------------------------------------//
		self.params = {};

	//------------------------------------------//
	// А3. Разовые действия до создания модели  //
	//------------------------------------------//
	ko.computed(function(){

		//--------------------------------------------//
		// А3.1. Если это не первый запуск, завершить //
		//--------------------------------------------//
		if(!ko.computedContext.isInitial()) return;

		//---------------------------------------------------------//
		// А3.2. Загрузить входящие параметры в объект self.params //
		//---------------------------------------------------------//
		for(var param_key in params) {

			// А3.2.1] Если свойство не своё, пропускаем
			if(!params.hasOwnProperty(param_key)) continue;

			// А3.2.2] Сохранить параметры
			self.params[param_key] = params[param_key];

		}

		//----------------------------------//
		// А3.3. Подготовить UID компонента //
		//----------------------------------//

			// 1] Подготовить глобальный объект для учёта кол-ва экземпляров этого компонента в документе //
			//--------------------------------------------------------------------------------------------//
			if(typeof window[component_name+'_data'] == 'undefined')
				window[component_name+'_data'] = {};

			// 2] Добавить в него счётчик, если такового ещё нет //
			//---------------------------------------------------//
			if(typeof window[component_name+'_data'].counter == 'undefined')
				window[component_name+'_data'].counter = 1;
			else
				window[component_name+'_data'].counter = +window[component_name+'_data'].counter + 1;

			// 3] Получить ID этого компонента //
			//---------------------------------//
			self.this_component_id = window[component_name+'_data'].counter;

		//-----------------------------------------------//
		// А3.4. Подготовка входящих через params данных //
		//-----------------------------------------------//
		(function(){

			// 1] //
			//-----------------------------------------------//
			(function(){



			})();


		})();

		//---------------------------------------------------------//
		// А3.5.  //
		//---------------------------------------------------------//




	});


	//--------------------------------------//
	// 			        		 	                  //
	// 			 F. Функционал компонента  		  //
	// 			         			                  //
	//--------------------------------------//

	//--------------------------------------------//
	// F1. Объект-контейнер для всего функционала //
	//--------------------------------------------//
	self.f = {};

	//--------------------------------------------//
	// F2.  //
	//--------------------------------------------//



	//--------------------------------------//
	// 			        		 	                  //
	// 			   M. Модель компонента  			  //
	// 			         			                  //
	//--------------------------------------//

	//----------------------------------------------//
	// M1. Объект-контейнер для всех свойств модели //
	//----------------------------------------------//
	self.m = {};

	//--------------------//
	// M2. Имя компонента //
	//--------------------//
	self.m.component_name = component_name;

	//----------------------------------------//
	// M3. Номер (UID) компонента в документе //
	//----------------------------------------//
	self.m.component_uid = self.this_component_id;

	//--------------------//
	// M4.  //
	//--------------------//


	//-------------------------------------------//
	// Mn. Индексы и вычисляемые значения модели //
	//-------------------------------------------//
	ko.computed(function(){

		//------------------------------------------------------------//
		// Mn.1. Объект-контейнер для индексов и вычисляемых значений //
		//------------------------------------------------------------//
		self.m.indexes = {};

		//------------------------------------------------------------//
		// Mn.2.  //
		//------------------------------------------------------------//



	});


	//------------------------------------------------------//
	// 			        		 	                                  //
	// 	 Y. Данные, которым доступны все прочие данные  	  //
	// 			         			                                  //
	//------------------------------------------------------//

	//----------------------------------------------//
	// Y1. Объект-контейнер для всех свойств модели //
	//----------------------------------------------//
	self.m.sN = {};

	//-------------------------------------------------------//
	// Y2. 	 //
	//-------------------------------------------------------//



	//------------------------------------//
	// Yn. Индексы и вычисляемые значения //
	//------------------------------------//
	ko.computed(function(){

		//---------------------------------------//
		// sN.n.1. Объект-контейнер для индексов //
		//---------------------------------------//
		self.m.sN.indexes = {};



	});


	//----------------------------------------//
	// 			        		 	                    //
	// 			 X. Подготовка к завершению  			//
	// 			         			                    //
	//----------------------------------------//

	//----------------------------------------//
	// X1. Сервис провайдер клиентской модели //
	//----------------------------------------//
	// - Код здесь выполняется лишь 1 раз, при открытии документа в браузере.
	// - Отличное место, скажем, для назначения обработчиков событий.
	ko.computed(function(){

		//--------------------------------------------//
		// X1.1. Если это не первый запуск, завершить //
		//--------------------------------------------//
		if(!ko.computedContext.isInitial()) return;

		//----------------------------------------------------------------------------------------//
		// X1.2. Подключение к websocket-серверам, назначение обработчиков для входящих сообщений //
		//----------------------------------------------------------------------------------------//
		self.websocket = {};

			//-------------------------//
			// X1.2.1. Подключение ws1 //
			//-------------------------//
			//self.websocket.ws1 = io('http://'+server.settings.websocket_server_ip+':6001');

			//---------------------------------------------------------------//
			// X1.2.2 Назначение обработчиков сообщений с websocket-серверов //
			//---------------------------------------------------------------//

				// 1] Добавление в интерфейс новых записей, поступивших в лог //
				//------------------------------------------------------------//
				//
				// 	> Сервер
				// 	  - ws1
				//
				// 	> Канал
				// 	  - m2:M2\\Documents\\Main\\Events\\E1_broadcast
				//
				// 	> Описание
				// 	  - В лог, в БД модуля M2, могут поступать новые сообщения.
				// 	  - Задача в том, чтобы они сразу же отображались в открытых интерфейсах лога.
				// 	  - Для этого слушаем вышеуказанны канал, и принимаем из него сообщения.
				// 	  - Одно сообщение означает одну новую запись в лог.
				// 	  - Сообщения содержат текст добавляемого в лог сообщения, и список его тегов.
				// 	  - В качестве обработчика, назначаем функцию, которая добавляет сообщение в интерфейс.
				//

				//self.websocket.ws1.on("m2:M2\\Documents\\Main\\Events\\E1_broadcast", function(message) {
				//
				//	// Вызвать функцию-обработчик входящих через этот канал сообщений
				//	self.f.s2.log_websocket_handler(message);
				//
				//});


		//--------------------------------------------//
		// X1.3.  //
		//--------------------------------------------//



	});

	//---------------------------------------------------------------//
	// X2. Записать ссылку self в переданную в params ko-наблюдаемую //
	//---------------------------------------------------------------//
	if(typeof params.model !== 'undefined')
		params.model(self);

	//------------------------------------------//
	// X3. Вернуть ссылку self на объект-модель //
	//------------------------------------------//
	return self;




}, template: (function () {/*





*/}).toString().match(/[^]*\/\*([^]*)\*\/\}$/)[1]}



//----------------------------------//
// 			        		 	              //
// 		 Регистрация компонента в KO 	//
// 			         			              //
//----------------------------------//
library_ko_components.register(component_name);



})();








